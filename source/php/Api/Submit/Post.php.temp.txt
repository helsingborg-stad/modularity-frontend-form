
    /**
     * Handles a REST request to submit a form
     *
     * @param WP_REST_Request $request The REST request object
     *
     * @return WP_REST_Response|WP_Error The response object or an error
     */
    public function handleRequest(WP_REST_Request $request): WP_REST_Response|WP_Error
    {

        // Check if the request is valid
        if (!$this->validateNonce($nonce, $moduleId)) {
            return rest_ensure_response(
                new WP_Error(
                    'invalid_nonce',
                    __('Invalid nonce', 'modularity-frontend-form'),
                    array('status' => WP_Http::UNAUTHORIZED)
                )
            );
        }

        return $this->formatInsertResponse(
            $this->insertPost($moduleId, $fieldMeta)
        );
    }

    /**
     * Formats the response for the insert post request
     *
     * @param WP_Error|int $result The result of the post insertion
     *
     * @return WP_REST_Response The formatted response
     */
    private function formatInsertResponse(WP_Error|int $result): WP_REST_Response|WP_Error {
        if (is_wp_error($result) || $result === 0) {
            return rest_ensure_response(new WP_Error(
                $result instanceof WP_Error ? $result->get_error_code() : 'post_not_created',
                $result instanceof WP_Error ? $result->get_error_message() : __('Post not created', 'modularity-frontend-form'),
                [
                    'status' => WP_Http::BAD_REQUEST,
                    'details' => $result instanceof WP_Error ? $result->get_error_data() : null
                ]
            ));
        }
    
        return rest_ensure_response([
            'status' => 'success',
            'message' => __('Post created successfully', 'modularity-frontend-form'),
            'postId' => $result,
        ]);
    }

    /**
     * Handles the request to insert a post
     *
     * @param int|null $moduleID The module ID
     * @param array|null $fieldMeta The field meta data
     *
     * @return WP_Error|int The result of the post insertion
     */
    public function insertPost(int $moduleID, array|null $fieldMeta): WP_Error|int {

        // Get the post type to submit to
        $targetPostType = $this->getModuleConfigInstance(
            $moduleID
        )->getTargetPostType();
        
        $result = $this->wpService->wpInsertPost([
            'post_title'    => 'Test post',
            'post_type'     => $targetPostType,
            'post_status'   => 'publish',
            'meta_input'   => [
                'module_id' => $moduleID,
                'field_meta' => $fieldMeta,
            ],
        ]);

        // Post Successfully created, store the fields
        if (!$this->wpService->isWpError($result) && !is_null($fieldMeta)) {
            $this->storeFields($fieldMeta, $result);
        }

        return $result;
    }

    /**
     * Stores the fields in the database
     *
     * @param array $fields The fields to store
     * @param int $postId The ID of the post to store the fields for
     */
    public function storeFields(array $fields, int $postId)
    {
        foreach ($fields as $key => $value) {
            if (isset($fields[$key])) {
                $result = $this->acfService->updateField(
                    $key, 
                    $this->santitileFieldValue($value, $key), 
                    $postId
                );

                if($result === false) {
                    throw new WP_Error(
                        'store_field_failed',
                        __('Could not save form metadata.', 'modularity-frontend-form')
                    );
                }
            }
        }
    }

